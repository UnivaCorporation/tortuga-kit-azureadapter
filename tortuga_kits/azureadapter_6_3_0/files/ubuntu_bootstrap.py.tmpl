#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import subprocess
import urllib2
import platform
import time
import base64
import json
import ssl

### SETTINGS


def runCommand(cmd, retries=1):
    for nRetry in range(retries):
        p = subprocess.Popen(cmd, shell=True)

        retval = p.wait()
        if retval == 0:
            break

        time.sleep(5 + 2 ** (nRetry * 0.75))
    else:
        return -1

    return retval


def _installPackage(pkgname, retries=10):
    cmd = 'apt-get --assume-yes install %s' % (pkgname)

    retval = runCommand(cmd, retries)

    if retval != 0:
        raise Exception('Error installing package [%s]' % (pkgList))


def _isPackageInstalled(pkgName):
    return runCommand(
        'dpkg -l %s 2>/dev/null | grep -q ^ii' % (pkgName)) == 0


def installPuppet(codename):
    url= 'http://apt.puppetlabs.com/puppetlabs-release-pc1-%s.deb' % (codename)

    bRepoInstalled = _isPackageInstalled('puppetlabs-release')

    if not bRepoInstalled:
        import tempfile

        tmptuple = tempfile.mkstemp()

        retval = runCommand('wget --tries 5 --retry-connrefused --timeout 120'
                            ' --random-wait --quiet %s --output-document %s'
                            % (url, tmptuple[1]))

        if retval != 0:
            raise Exception(
                'Unable to install package [puppetlabs-release]')

        cmd = 'dpkg --install %s' % (tmptuple[1])

        retval = runCommand(cmd)

        if retval != 0:
            raise Exception('Error installing [puppetlabs-release]')

            os.close(tmptuple[0])

            os.unlink(tmptuple[1])

        # Refresh APT repository metadata
        runCommand('apt-get update')

    # Attempt to install puppet
    if not _isPackageInstalled('puppet-agent'):
        _installPackage('puppet-agent')

    # Ensure Puppet is configured not to start at boot
    runCommand('/usr/sbin/update-rc.d puppet disable')


def setHostName():
    url = 'https://%s:%s/v1/identify-node' % (installerIpAddress, port)

    req = urllib2.Request(url)

    req.add_header(
        'Authorization',
        'Basic ' + base64.standard_b64encode(
            '%s:%s' % (cfmUser, cfmPassword)))

    ctx = ssl.create_default_context()
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE

    for nCount in range(5):
        try:
            response = urllib2.urlopen(req, context=ctx)
            break
        except urllib2.HTTPError as ex:
            if ex.code == 401:
                raise Exception(
                    'Invalid Tortuga webservice credentials')
            elif ex.code == 404:
                # Unrecoverable
                raise Exception(
                    'URI not found; invalid Tortuga webservice'
                    ' configuration')

            time.sleep(2 ** (nCount + 1))
    else:
        raise Exception('Unable to communicate with Tortuga webservice')

    d = json.load(response)

    if response.code != 200:
        if 'error' in d:
            errmsg = 'Tortuga webservice error: msg=[%s]' % (
                error['message'])
        else:
            errmsg = 'Tortuga webservice internal error'

        raise Exception(errmsg)

    h = d['node']['name']

    runCommand('hostname %s' % (h))

    with open('/etc/hostname', 'a') as fp:
        fp.write('%s\n' % (h))

    return h


def updateResolver(domainName):
    with open('/etc/resolv.conf', 'w') as fp:
        if domainName:
            fp.write('search %s\n' % (domainName))

        fp.write('nameserver %s\n' % (installerIpAddress))


def bootstrapPuppet():
    cmd = ('/opt/puppetlabs/bin/puppet agent'
           ' --logdest /tmp/puppet_bootstrap.log'
           ' --onetime --server %s --waitforcert 120' % (installerHostName))

    runCommand(cmd)


def main():
    h = setHostName()

    domainName = h.split('.', 1)[1] if '.' in h else None

    with open('/etc/hosts', 'a+') as fp:
        fp.write('%s\t%s\n' % (installerIpAddress, installerHostName))

    updateResolver(domainName)

    vals = platform.dist()

    if vals[0].lower() == 'debian':
        # Convert version number into distro 'codename'
        if vals[1] == '7.7':
            codename = 'wheezy'
        else:
            raise Exception('Unsupported Debian version [%s]' % (vals[1]))
    else:
        codename = vals[2]

    installPuppet(codename)

    bootstrapPuppet()


if __name__ == '__main__':
    main()
